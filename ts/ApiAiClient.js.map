{"version":3,"sources":["ApiAiClient.ts"],"names":[],"mappings":"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","file":"ApiAiClient.js","sourcesContent":["import { ApiAiConstants } from \"./ApiAiConstants\";\nimport { ApiAiClientConfigurationError } from \"./Errors\";\nimport { EventRequest } from \"./Request/EventRequest\";\nimport TextRequest from \"./Request/TextRequest\";\n// import { TTSRequest } from \"./Request/TTSRequest\";\n\nimport { IApiClientOptions, IRequestOptions, IServerResponse, IStringMap } from \"./Interfaces\";\n\nexport * from \"./Interfaces\";\nexport {ApiAiConstants} from \"./ApiAiConstants\";\n\nexport class ApiAiClient {\n\n    private apiLang: ApiAiConstants.AVAILABLE_LANGUAGES;\n    private apiVersion: string;\n    private apiBaseUrl: string;\n    private sessionId: string;\n    private accessToken: string;\n\n    constructor(options: IApiClientOptions) {\n\n        if (!options || !options.accessToken) {\n            throw new ApiAiClientConfigurationError(\"Access token is required for new ApiAi.Client instance\");\n        }\n\n        this.accessToken = options.accessToken;\n        this.apiLang = options.lang || ApiAiConstants.DEFAULT_CLIENT_LANG;\n        this.apiVersion = options.version || ApiAiConstants.DEFAULT_API_VERSION;\n        this.apiBaseUrl = options.baseUrl || ApiAiConstants.DEFAULT_BASE_URL;\n        this.sessionId = options.sessionId || this.guid();\n    }\n\n    public textRequest(query, options: IRequestOptions = {}): Promise<IServerResponse> {\n        if (!query) {\n            throw new ApiAiClientConfigurationError(\"Query should not be empty\");\n        }\n        options.query = query;\n        return new TextRequest(this, options).perform();\n    }\n\n    public eventRequest(eventName, eventData: IStringMap = {},\n                        options: IRequestOptions = {}): Promise<IServerResponse> {\n        if (!eventName) {\n            throw new ApiAiClientConfigurationError(\"Event name can not be empty\");\n        }\n        options.event = {name: eventName, data: eventData};\n        return new EventRequest(this, options).perform();\n    }\n\n    // @todo: implement local tts request\n    /*public ttsRequest(query) {\n        if (!query) {\n            throw new ApiAiClientConfigurationError(\"Query should not be empty\");\n        }\n        return new TTSRequest(this).makeTTSRequest(query);\n    }*/\n\n    /*public userEntitiesRequest(options: IRequestOptions = {}): UserEntitiesRequest {\n        return new UserEntitiesRequest(this, options);\n    }*/\n\n    public getAccessToken(): string {\n        return this.accessToken;\n    }\n\n    public getApiVersion(): string {\n        return (this.apiVersion) ? this.apiVersion : ApiAiConstants.DEFAULT_API_VERSION;\n    }\n\n    public getApiLang(): ApiAiConstants.AVAILABLE_LANGUAGES {\n        return (this.apiLang) ? this.apiLang : ApiAiConstants.DEFAULT_CLIENT_LANG;\n    }\n\n    public getApiBaseUrl(): string {\n        return (this.apiBaseUrl) ? this.apiBaseUrl : ApiAiConstants.DEFAULT_BASE_URL;\n    }\n\n    public setSessionId(sessionId: string) {\n        this.sessionId = sessionId;\n    }\n\n    public getSessionId(): string {\n        return this.sessionId;\n    }\n\n    /**\n     * generates new random UUID\n     * @returns {string}\n     */\n    private guid(): string {\n        const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n        return s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" +\n            s4() + \"-\" + s4() + s4() + s4();\n    }\n}\n"]}