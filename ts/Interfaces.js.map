{"version":3,"sources":["Interfaces.ts"],"names":[],"mappings":";;AAmEA,IAAiB,aAAa,CAqB7B;AArBD,WAAiB,aAAa;IAC1B,IAAY,KAKX;IALD,WAAY,KAAK;QACb,+CAAW,CAAA;QACX,2CAAS,CAAA;QACT,6CAAU,CAAA;QACV,6CAAU,CAAA;IACd,CAAC,EALW,KAAK,GAAL,mBAAK,KAAL,mBAAK,QAKhB;IACD,IAAY,KAaX;IAbD,WAAY,KAAK;QACb,qEAAsB,CAAA;QACtB,yEAAwB,CAAA;QACxB,2DAAiB,CAAA;QACjB,mDAAa,CAAA;QACb,yCAAQ,CAAA;QACR,qDAAc,CAAA;QACd,iEAAoB,CAAA;QACpB,qDAAc,CAAA;QACd,+DAAmB,CAAA;QACnB,iEAAoB,CAAA;QACpB,0CAAQ,CAAA;QACR,8DAAkB,CAAA;IACtB,CAAC,EAbW,KAAK,GAAL,mBAAK,KAAL,mBAAK,QAahB;AACL,CAAC,EArBgB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAqB7B","file":"Interfaces.js","sourcesContent":["import {ApiAiConstants} from \"./ApiAiConstants\";\n\nexport interface IRequestOptions {\n    query?: string;\n    event?: {name: string, data?: IStringMap};\n    sessionId?: string;\n    lang?: ApiAiConstants.AVAILABLE_LANGUAGES;\n}\n\nexport interface IServerResponse {\n    id?: string;\n    result?: {\n        action: string,\n        resolvedQuery: string,\n        speech: string;\n        fulfillment?: {\n            speech: string\n        }\n    };\n    status: {\n        code: number,\n        errorDetails?: string,\n        errorID?: string,\n        errorType: string\n    };\n}\n\nexport interface IStringMap { [s: string]: string; }\n\nexport interface IApiClientOptions {\n    lang?: ApiAiConstants.AVAILABLE_LANGUAGES;\n    version?: string;\n    baseUrl?: string;\n    sessionId?: string;\n    streamClientClass?: IStreamClientConstructor;\n    accessToken: string;\n}\n\nexport interface IStreamClientConstructor {\n    new (options: IStreamClientOptions): IStreamClient;\n}\n\nexport interface IStreamClient {\n    init(): void;\n    open(): void;\n    close(): void;\n    startListening(): void;\n    stopListening(): void;\n}\n\nexport interface IStreamClientOptions {\n    server?: string;\n    token?: string;\n    sessionId?: string;\n    lang?: ApiAiConstants.AVAILABLE_LANGUAGES;\n    contentType?: string;\n    readingInterval?: string;\n    onOpen?: () => void;\n    onClose?: () => void;\n    onInit?: () => void;\n    onStartListening?: () => void;\n    onStopListening?: () => void;\n    onResults?: (data: IServerResponse) => void;\n    onEvent?: (eventCode: IStreamClient.EVENT, message: string) => void;\n    onError?: (errorCode: IStreamClient.ERROR, message: string) => void;\n}\n\nexport namespace IStreamClient {\n    export enum ERROR {\n        ERR_NETWORK,\n        ERR_AUDIO,\n        ERR_SERVER,\n        ERR_CLIENT\n    }\n    export enum EVENT {\n        MSG_WAITING_MICROPHONE,\n        MSG_MEDIA_STREAM_CREATED,\n        MSG_INIT_RECORDER,\n        MSG_RECORDING,\n        MSG_SEND,\n        MSG_SEND_EMPTY,\n        MSG_SEND_EOS_OR_JSON,\n        MSG_WEB_SOCKET,\n        MSG_WEB_SOCKET_OPEN,\n        MSG_WEB_SOCKET_CLOSE,\n        MSG_STOP,\n        MSG_CONFIG_CHANGED\n    }\n}\n"]}