{"version":3,"sources":["XhrRequest.ts"],"names":[],"mappings":"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","file":"XhrRequest.js","sourcesContent":["import {IStringMap} from \"./Interfaces\";\n/**\n * quick ts implementation of example from\n * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\n * with some minor improvements\n * @todo: test (?)\n * @todo: add node.js implementation with node's http inside. Just to make SDK cross-platform\n */\nclass XhrRequest {\n    // Method that performs the ajax request\n    public static ajax(\n        method: XhrRequest.Method,\n        url: string,\n        args: IStringMap = null,\n        headers: IStringMap = null,\n        options: IStringMap = {}\n    ): Promise<any> {\n\n        // Creating a promise\n        return new Promise((resolve, reject) => {\n\n            // Instantiates the XMLHttpRequest\n            const client: XMLHttpRequest = XhrRequest.createXMLHTTPObject();\n            let uri: string = url;\n            let payload = null;\n\n            // Add given payload to get request\n            if (args && (method === XhrRequest.Method.GET)) {\n                uri += \"?\";\n                let argcount = 0;\n                for (const key in args) {\n                    if (args.hasOwnProperty(key)) {\n                        if (argcount++) {\n                            uri += \"&\";\n                        }\n                        uri += encodeURIComponent(key) + \"=\" + encodeURIComponent(args[key]);\n                    }\n                }\n            } else if (args) {\n                if (!headers) {\n                    headers = {};\n                }\n                headers[\"Content-Type\"] = \"application/json; charset=utf-8\";\n                payload = JSON.stringify(args);\n            }\n\n            for (const key in options) {\n                if (key in client) {\n                    client[key] = options[key];\n                }\n            }\n\n            // hack: method[method] is somewhat like .toString for enum Method\n            // should be made in normal way\n            client.open(XhrRequest.Method[method], uri, true);\n            // Add given headers\n\n            if (headers) {\n                for (const key in headers) {\n                    if (headers.hasOwnProperty(key)) {\n                        client.setRequestHeader(key, headers[key]);\n                    }\n                }\n            }\n\n            payload ? client.send(payload) : client.send();\n\n            client.onload = () => {\n                if (client.status >= 200 && client.status < 300) {\n                    // Performs the function \"resolve\" when this.status is equal to 2xx\n                    resolve(client);\n                } else {\n                    // Performs the function \"reject\" when this.status is different than 2xx\n                    reject(client);\n                }\n            };\n            client.onerror = () => {\n                reject(client);\n            };\n        });\n\n    }\n\n    public static get(url, payload: IStringMap = null, headers: IStringMap = null, options = {}): Promise<any> {\n        return XhrRequest.ajax(XhrRequest.Method.GET, url, payload, headers, options);\n    }\n\n    public static post(url: string, payload: IStringMap = null, headers: IStringMap = null,\n                       options = {}): Promise<any> {\n        return XhrRequest.ajax(XhrRequest.Method.POST, url, payload, headers, options);\n    }\n\n    public static put(url: string, payload: IStringMap = null, headers: IStringMap = null,\n                      options = {}): Promise<any>  {\n        return XhrRequest.ajax(XhrRequest.Method.PUT, url, payload, headers, options);\n    }\n\n    public static delete(url: string, payload: IStringMap = null, headers: IStringMap = null,\n                         options = {}): Promise<any>  {\n        return XhrRequest.ajax(XhrRequest.Method.DELETE, url, payload, headers, options);\n    }\n\n    private static XMLHttpFactories: Function[] = [\n        () => new XMLHttpRequest(),\n        () => new window[\"ActiveXObject\"](\"Msxml2.XMLHTTP\"),\n        () => new window[\"ActiveXObject\"](\"Msxml3.XMLHTTP\"),\n        () => new window[\"ActiveXObject\"](\"Microsoft.XMLHTTP\")\n    ];\n\n    private static createXMLHTTPObject(): XMLHttpRequest {\n        let xmlhttp: XMLHttpRequest = null;\n        for (const i of XhrRequest.XMLHttpFactories) {\n            try {\n                xmlhttp = i();\n            } catch (e) {\n                continue;\n            }\n            break;\n        }\n\n        return xmlhttp;\n    }\n}\n\nnamespace XhrRequest {\n    export enum Method {\n        GET = \"GET\" as any,\n        POST = \"POST\" as any,\n        PUT = \"PUT\" as any,\n        DELETE = \"DELETE\" as any\n    }\n}\n\nexport default XhrRequest;\n"]}