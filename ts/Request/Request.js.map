{"version":3,"sources":["Request.ts"],"names":[],"mappings":";;AACA,oCAA4C;AAE5C,4CAAuC;AAEvC;IA2BE,iBAAsB,WAAwB,EAAY,OAAwB;QAA5D,gBAAW,GAAX,WAAW,CAAa;QAAY,YAAO,GAAP,OAAO,CAAiB;QAEhF,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,GAAG,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;QAC5F,IAAI,CAAC,aAAa,GAAG,uBAAU,CAAC,MAAM,CAAC,IAAI,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG;YACb,aAAa,EAAE,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE;SAC7D,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;QAClD,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IAE3D,CAAC;IApCc,qBAAa,GAA5B,UAA6B,GAAmB;QAC9C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IACvD,CAAC;IAEc,mBAAW,GAA1B,UAA2B,GAAmB;QAE5C,IAAI,KAAK,GAAG,IAAI,0BAAiB,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC;YACH,IAAM,cAAc,GAAoB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACrE,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,IAAI,cAAc,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;gBAChE,KAAK,GAAG,IAAI,0BAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,YAAY,EAAE,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAChG,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,GAAG,IAAI,0BAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,KAAK,GAAG,IAAI,0BAAiB,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM,CAAC,OAAO,CAAC,MAAM,CAAoB,KAAK,CAAC,CAAC;IAClD,CAAC;IAmBM,yBAAO,GAAd,UAAe,eAAsB;QAAtB,gCAAA,EAAA,sBAAsB;QAEnC,IAAM,OAAO,GAAG,eAAe,GAAG,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC;QAEjE,MAAM,CAAC,uBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,OAAqB,EAAE,IAAI,CAAC,OAAO,CAAC;aACtF,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACtC,OAAK,CAAA,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3C,CAAC;IACH,cAAC;AAAD,CAhDA,AAgDC,IAAA;AAED,qBAAe,OAAO,CAAC","file":"Request.js","sourcesContent":["import {ApiAiClient} from \"../ApiAiClient\";\nimport {ApiAiRequestError} from \"../Errors\";\nimport {IRequestOptions, IServerResponse, IStringMap} from \"../Interfaces\";\nimport XhrRequest from \"../XhrRequest\";\n\nabstract class Request {\n\n  private static handleSuccess(xhr: XMLHttpRequest): Promise<IServerResponse> {\n    return Promise.resolve(JSON.parse(xhr.responseText));\n  }\n\n  private static handleError(xhr: XMLHttpRequest): Promise<ApiAiRequestError> {\n\n    let error = new ApiAiRequestError(null);\n    try {\n      const serverResponse: IServerResponse = JSON.parse(xhr.responseText);\n      if (serverResponse.status && serverResponse.status.errorDetails) {\n        error = new ApiAiRequestError(serverResponse.status.errorDetails, serverResponse.status.code);\n      } else {\n        error = new ApiAiRequestError(xhr.statusText, xhr.status);\n      }\n    } catch (e) {\n      error = new ApiAiRequestError(xhr.statusText, xhr.status);\n    }\n\n    return Promise.reject<ApiAiRequestError>(error);\n  }\n\n  protected uri;\n  protected requestMethod;\n  protected headers;\n\n  constructor(protected apiAiClient: ApiAiClient, protected options: IRequestOptions) {\n\n    this.uri = this.apiAiClient.getApiBaseUrl() + \"query?v=\" + this.apiAiClient.getApiVersion();\n    this.requestMethod = XhrRequest.Method.POST;\n    this.headers = {\n      Authorization: \"Bearer \" + this.apiAiClient.getAccessToken(),\n    };\n\n    this.options.lang = this.apiAiClient.getApiLang();\n    this.options.sessionId = this.apiAiClient.getSessionId();\n\n  }\n\n  public perform(overrideOptions = null): Promise<IServerResponse> {\n\n    const options = overrideOptions ? overrideOptions : this.options;\n\n    return XhrRequest.ajax(this.requestMethod, this.uri, options as IStringMap, this.headers)\n      .then(Request.handleSuccess.bind(this))\n      .catch(Request.handleError.bind(this));\n  }\n}\n\nexport default Request;\n"]}