{"version":3,"sources":["TTSRequest.ts"],"names":[],"mappings":"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","file":"TTSRequest.js","sourcesContent":["import {ApiAiClient} from \"../ApiAiClient\";\nimport {ApiAiConstants} from \"../ApiAiConstants\";\nimport {ApiAiClientConfigurationError, ApiAiRequestError} from \"../Errors\";\nimport {IRequestOptions} from \"../Interfaces\";\nimport XhrRequest from \"../XhrRequest\";\nimport Request from \"./Request\";\n\nexport class TTSRequest extends Request {\n\n  private static RESPONSE_TYPE_ARRAYBUFFER = \"arraybuffer\";\n\n  private static audioContext: AudioContext;\n\n  constructor(protected apiAiClient: ApiAiClient, options: IRequestOptions = {}) {\n    super(apiAiClient, options);\n    // this.requestMethod = XhrRequest.Method.GET;\n    this.uri = ApiAiConstants.DEFAULT_TTS_HOST;\n    const AudioContext = window.AudioContext || webkitAudioContext;\n\n    if (!TTSRequest.audioContext) {\n      TTSRequest.audioContext = new AudioContext();\n    }\n  }\n\n  public makeTTSRequest(text: string) {\n\n    if (!text) {\n      throw new ApiAiClientConfigurationError(\"Request can not be empty\");\n    }\n\n    const params = {\n      lang: \"en-US\", // <any> this.apiAiClient.getApiLang(),\n      text: encodeURIComponent(text),\n      v: this.apiAiClient.getApiVersion()\n    };\n\n    const headers = {\n      \"Accept-language\": \"en-US\",\n      \"Authorization\": \"Bearer \" + this.apiAiClient.getAccessToken()\n    };\n\n    return this.makeRequest(this.uri, params, headers, {responseType: TTSRequest.RESPONSE_TYPE_ARRAYBUFFER})\n      .then(this.resolveTTSPromise)\n      .catch(this.rejectTTSPromise.bind(this))\n      ;\n  }\n\n  private resolveTTSPromise = (data: {response: ArrayBuffer}) => {\n    return this.speak(data.response);\n  }\n\n  private rejectTTSPromise = (reason: string) => {\n    throw new ApiAiRequestError(reason);\n  }\n\n  private makeRequest(url, params, headers, options): Promise<{response: ArrayBuffer}> {\n    return XhrRequest.get(url, params, headers, options);\n  }\n\n  private speak(data: ArrayBuffer): Promise<any> {\n\n    if (!data.byteLength) {\n      return Promise.reject(\"TTS Server unavailable\");\n    }\n\n    return new Promise((resolve, reject) => {\n      TTSRequest.audioContext.decodeAudioData(\n        data,\n        (buffer: AudioBuffer) => {\n          return this.playSound(buffer, resolve);\n        },\n        reject\n      ).then(null, (err) => reject(err));\n    });\n  }\n\n  private playSound(buffer: AudioBuffer, resolve) {\n    const source = TTSRequest.audioContext.createBufferSource();\n    source.buffer = buffer;\n    source.connect(TTSRequest.audioContext.destination);\n    source.onended = resolve;\n    source.start(0);\n  };\n}\n"]}